// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("VERCELDB_PRISMA_URL") // uses connection pooling
  directUrl = env("VERCELDB_URL_NON_POOLING") // uses a direct connection
}

// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

model User {
  id Int @id @default(autoincrement())
  photo String @default("https://i.pinimg.com/236x/2f/97/f0/2f97f05b32547f54ef1bdf99cd207c90.jpg")
  profileDescription String @default("Hola, Estoy usando Recipify :D")
  email String @unique
  name String
  country String
  password String
  role String @default("USER")
  posts Recipe[]
  passwordResetTokens PasswordResetToken[] 
  reviews Review[]
  favorites Favorite[]
  reporteds Reported[]
  schRecipes ScheduledRecipes[]
}

model ScheduledRecipes {
    id Int @id @default(autoincrement())
    userID Int
    recipeID Int
    schDate DateTime
    schTime String
    schBy User @relation(fields: [userID],references: [id])
    schRecipe Recipe @relation(fields: [recipeID],references: [id])
}


model Payment  {
    id Int @id @default(autoincrement())
    amount Int
    by String
  }


model Favorite{
  id Int @id @default(autoincrement())
  userID Int
  recipeID Int
  likedBy User @relation(fields: [userID],references: [id])
  likedRecipe Recipe @relation(fields: [recipeID],references: [id])
}

model Reported{
  id Int @id @default(autoincrement())
  reportedBy User @relation(fields: [userID],references: [id])
  userID Int
  reportedRecipe Recipe @relation(fields: [recipeID], references: [id])
  recipeID Int
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  createdAt DateTime  @default(now())
  resetAt   DateTime?
  user   User @relation(fields: [userId], references: [id])
  userId Int
} 


model Recipe {
  id Int @id @default(autoincrement())
  title String
  photo String
  description String
  rating Int
  pasos String
  ingredients String 
  visibility Boolean @default(true)
  author User @relation(fields: [authorID],references: [id])
  authorID Int
  createdAt DateTime @default(now())
  updatedAt  DateTime   @updatedAt
  categoria Categoria @relation(fields: [categoriaID],references: [id])
  categoriaID Int
  reviews Review[] 
  favorites Favorite[]
  reports Reported[]
  schRecords ScheduledRecipes[]
}

model Categoria {
  id Int @id @default(autoincrement())
  name String
  recipes Recipe[]
}


model Review {
  id Int @id @default(autoincrement())
  rating Int @default(0)
  author User @relation(fields: [authorID],references: [id])
  authorID Int
  recipe Recipe @relation(fields: [recipeID],references: [id])
  recipeID Int
}

